    
*.js linguist-language=python
*.css linguist-language=python
*.html linguist-language=python


# -*- coding:utf-8 -*-

'''
Created on 2019年8月23日

@author: 51665
'''

from html.parser import HTMLParser

__all__ = ['BalancedParser', 'CashFlowParser',
           'ProfitParser']


class BaseParser(HTMLParser):
    """Meta class of Parser"""
    
    def __init__(self, html=""):
        super().__init__()
        self.data, self.tmp = [], [list()]
        self.links = []
        html and self.feed(html)
    

class BalancedParser(BaseParser):
    """BalancedSheet parser"""
    
    tbody, tr = False, False
    td, strong = False, False 
    table, a = False, False
    
    def handle_starttag(self, tag, attrs):
        """override"""
        self.tbody = (tag == 'tbody') or self.tbody
        self.td = (tag == 'td') or self.td
        self.tr = (tag == 'tr') or self.tr
        self.strong = (tag == 'strong') or self.strong
        self.a = (tag == 'a') or self.a
            
        if tag == "table":
            if ('border', "0") in attrs:
                self.table = True
                
        if self.table and self.a:
            attrs_dict = dict(attrs)
            if attrs_dict['href'] not in self.links:
                self.links.append(attrs_dict['href'])
            print(attrs_dict['href'])
            
    def handle_endtag(self, tag):
        """override"""
        self.tr = self.tr and (not tag == 'tr')
        self.td = self.td and (not tag == 'td')
        self.a = self.a and (not tag == 'a')
        self.tbody = self.tbody and (not tag == 'tbody')
        self.table = self.table and (not tag == 'table')
        self.strong = self.strong and (not tag == 'strong')
        
        if self.tbody and tag == 'tr':
            self.tmp.append(list())
        elif tag == 'tbody':
            
            # remove the element without field or only one field
            # such as table headers
            tmp = list(filter(lambda x:len(x) > 1, self.tmp))
            
            # translate the arr
            # [[1, 2], [3, 4], [5, 6]] --> [[1, 3, 5], [2, 4, 6]]
            if len(tmp) > 0:
                self.data.extend([[i[j] for i in tmp] for j in range(1, len(tmp[0]))])
                
            self.tmp = [list()]
            
    def handle_data(self, data):
        """override"""
        # ：get text between
        # ：<tbody><td>...</td></tbody>
        if self.tbody and self.td:
            self.tmp[-1].append(
                data.replace(",", '').replace('--', '0')) 
    
    @property        
    def get_data(self):
        """you can do something for data
        in this method
        """
        
        def generate():
            for data in self.data:
                data_tuple = tuple(data)
                yield data_tuple
                    
        stream_data = generate() if self.data else self.data
            
        return stream_data
    
    @property
    def get_links(self):
        """parser the links we need in the HTML."""
        
        def generate():
            
            # filter the links
            # yield what we need
            for link in self.links:
                if link.startswith('http'):
                    yield link
                    
            # remove all the links had been visited    
            self.links = []
            
        stream_links = generate()
                
        return stream_links
    
    
class SummaryParser(BaseParser):
    
    td, strong, is_value = False, False, False
    data, links, tmp = [], [], []
    
    def handle_starttag(self, tag, attrs):
        self.td = self.td or(tag == 'td')
        self.strong = self.strong or(tag == 'strong')
        
        # match the following content
        # <td align="left" class="tdr"><strong>2019-06-30</strong></td>
        # by the time, create a new list to save the data of the next season
        if self.td and self.strong:
            self.data.append(self.tmp)
            self.tmp = []
        
        if self.td and ('class', 'tdr') in attrs:
            self.is_value = True
            
    def handle_endtag(self, tag):
        self.td = self.td and not tag == 'td'
        self.strong = self.strong and not tag == 'strong'
        self.is_value = self.is_value and self.td
        
    def handle_data(self, data):
        self.is_value and self.tmp.append(
            data.strip('元').replace('\xa0', '0').replace(',', ''))
        
    @property
    def get_data(self):
        """you can do something for data
        in this method
        """
        
        def generate():
            for data in self.data:
                if data:
                    data_tuple = tuple(data)
                    yield data_tuple
                    
        stream_data = generate() if self.data else self.data
            
        return stream_data
    
    @property
    def get_links(self):
        """you can do something for self.links
        in this method
        """
        return self.links
    
    
def CashFlowParser():
    """CashFlowSheet parser"""
    return BalancedParser()

    
def ProfitParser():
    """ProfitSheet parser"""
    return BalancedParser()


class ParserFactory(object):
    """create parsers"""
    
    @staticmethod
    def create_parser(name):
        """create instance according
        to the Parameter name
        """
        name = str(name)
        
        # name=Balanced or CashFlow or Profit   
        parser = eval('%sParser()' % name)
        return parser
        
